name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/,scripts/,ecosystem.config.cjs,nginx.conf"
          target: "/home/${{ secrets.SERVER_USER }}/deploy/murphys-laws/"
          overwrite: true

      - name: Update server and restart services
        uses: appleboy/ssh-action@v1.0.0
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,GITHUB_ACTOR
          script: |
            STAGING_DIR="$HOME/deploy/murphys-laws"
            TARGET_DIR="/root/murphys-laws"

            mkdir -p "$STAGING_DIR"
            sudo install -d -m 755 "$TARGET_DIR"
            sudo rsync -a --delete "$STAGING_DIR/" "$TARGET_DIR/"
            sudo chown -R root:root "$TARGET_DIR"

            sudo --preserve-env=GITHUB_SHA,GITHUB_ACTOR bash <<'EOF'
            set -e

            TARGET_DIR="/root/murphys-laws"

            # Load nvm and use Node v22
            export NVM_DIR="/root/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 22

            cd "$TARGET_DIR"

            # Backup production database before pulling
            cp murphys.db murphys.db.backup 2>/dev/null || true

            # Stash any local changes (like modified scripts)
            git stash --include-untracked || true

            # Pull latest code (for migrations, package.json, etc)
            git pull origin main

            # Restore production database (prevent overwriting)
            cp murphys.db.backup murphys.db 2>/dev/null || true

            # Create .env file with secrets
            cat > .env << EOF
            HOST=127.0.0.1
            PORT=8787
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            EOF

            # Install all dependencies (including vite for preview server)
            npm install

            # Run database migrations with safety checks
            echo "🔍 Running pre-migration safety checks..."
            npm run migrate:safe

            # Verify migration success
            if [ $? -eq 0 ]; then
              echo "✅ Migrations completed successfully"
              echo ""
              echo "📋 Applied migrations:"
              sqlite3 murphys.db "SELECT filename, applied_at FROM schema_migrations ORDER BY applied_at DESC LIMIT 5;"
            else
              echo "❌ Migration failed! Restoring backup..."
              cp murphys.db.pre-migrate-backup murphys.db 2>/dev/null || true
              exit 1
            fi

            # Restart services (they now serve pre-built dist/)
            pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs
            pm2 save
