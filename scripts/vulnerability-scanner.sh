#!/bin/bash

#############################################################################
# Vulnerability Scanner Script
# Scans for outdated packages, security vulnerabilities, and misconfigurations
# Should be run weekly via cron
#############################################################################

ALERT_EMAIL="ravidor@gmail.com"
LOG_FILE="/var/log/vulnerability-scanner.log"
REPORT_FILE="/tmp/vulnerability-report-$(date +%Y-%m-%d).txt"

# Logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Generate report
generate_report() {
    local report_content="$1"
    echo "$report_content" > "$REPORT_FILE"
    log "Report saved to $REPORT_FILE"
}

# Send email report
send_report() {
    local subject="$1"
    local report_file="$2"

    cat "$report_file" | mail -s "[Murphy's Laws] $subject" "$ALERT_EMAIL"
    log "Report emailed to $ALERT_EMAIL"
}

log "=========================================="
log "Starting Vulnerability Scan"
log "=========================================="

REPORT=""

# 1. System Package Vulnerabilities
log "Checking system packages..."
REPORT+="SYSTEM PACKAGE VULNERABILITIES\n"
REPORT+="==============================\n\n"

# Update package lists
apt-get update > /dev/null 2>&1

# Check for security updates
SECURITY_UPDATES=$(apt list --upgradable 2>/dev/null | grep -i security | wc -l)
if [ "$SECURITY_UPDATES" -gt 0 ]; then
    REPORT+="⚠️  $SECURITY_UPDATES security update(s) available:\n\n"
    REPORT+="$(apt list --upgradable 2>/dev/null | grep -i security)\n\n"
    log "Found $SECURITY_UPDATES security updates"
else
    REPORT+="✅ No security updates available\n\n"
    log "No security updates found"
fi

# List all upgradable packages
UPGRADABLE=$(apt list --upgradable 2>/dev/null | grep -v "Listing" | wc -l)
if [ "$UPGRADABLE" -gt 0 ]; then
    REPORT+="Total upgradable packages: $UPGRADABLE\n"
    REPORT+="$(apt list --upgradable 2>/dev/null | head -20)\n"
    if [ "$UPGRADABLE" -gt 20 ]; then
        REPORT+="... and $((UPGRADABLE - 20)) more\n"
    fi
    REPORT+="\n"
fi

# 2. Node.js/npm Vulnerabilities
log "Checking Node.js packages..."
REPORT+="NODE.JS PACKAGE VULNERABILITIES\n"
REPORT+="================================\n\n"

if [ -d "/root/murphys-laws" ]; then
    cd /root/murphys-laws || exit 1

    # Run npm audit
    NPM_AUDIT_OUTPUT=$(npm audit 2>&1)
    NPM_AUDIT_EXIT=$?

    if [ $NPM_AUDIT_EXIT -ne 0 ]; then
        # Parse npm audit output
        CRITICAL=$(echo "$NPM_AUDIT_OUTPUT" | grep -oP '\d+(?= critical)' || echo "0")
        HIGH=$(echo "$NPM_AUDIT_OUTPUT" | grep -oP '\d+(?= high)' || echo "0")
        MODERATE=$(echo "$NPM_AUDIT_OUTPUT" | grep -oP '\d+(?= moderate)' || echo "0")
        LOW=$(echo "$NPM_AUDIT_OUTPUT" | grep -oP '\d+(?= low)' || echo "0")

        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            REPORT+="⚠️  VULNERABILITIES FOUND:\n"
            REPORT+="  Critical: $CRITICAL\n"
            REPORT+="  High: $HIGH\n"
            REPORT+="  Moderate: $MODERATE\n"
            REPORT+="  Low: $LOW\n\n"

            # Get detailed vulnerability info
            REPORT+="Details:\n"
            REPORT+="$(npm audit --production 2>&1 | head -50)\n\n"

            log "Found npm vulnerabilities: $CRITICAL critical, $HIGH high"
        else
            REPORT+="⚠️  Minor vulnerabilities found (Moderate/Low):\n"
            REPORT+="  Moderate: $MODERATE\n"
            REPORT+="  Low: $LOW\n\n"
            log "Found minor npm vulnerabilities"
        fi

        # Suggest fixes
        REPORT+="To fix vulnerabilities, run:\n"
        REPORT+="  cd /root/murphys-laws\n"
        REPORT+="  npm audit fix\n\n"
    else
        REPORT+="✅ No npm vulnerabilities found\n\n"
        log "No npm vulnerabilities found"
    fi
else
    REPORT+="Project directory not found\n\n"
fi

# 3. SSL/TLS Configuration
log "Checking SSL/TLS configuration..."
REPORT+="SSL/TLS SECURITY\n"
REPORT+="================\n\n"

if [ -f /etc/letsencrypt/live/murphys-laws.com/cert.pem ]; then
    # Check certificate expiration
    EXPIRY_DAYS=$(( ($(date -d "$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/murphys-laws.com/cert.pem | cut -d= -f2)" +%s) - $(date +%s)) / 86400 ))

    if [ "$EXPIRY_DAYS" -lt 14 ]; then
        REPORT+="⚠️  SSL certificate expires in $EXPIRY_DAYS days\n\n"
    else
        REPORT+="✅ SSL certificate valid for $EXPIRY_DAYS days\n\n"
    fi

    # Check SSL protocols
    REPORT+="SSL Configuration:\n"
    if [ -f /etc/nginx/sites-available/murphys-laws ]; then
        SSL_PROTOCOLS=$(grep "ssl_protocols" /etc/letsencrypt/options-ssl-nginx.conf 2>/dev/null || echo "Not configured")
        REPORT+="  Protocols: $SSL_PROTOCOLS\n"
    fi
    REPORT+="\n"
else
    REPORT+="⚠️  SSL certificate not found\n\n"
fi

# 4. SSH Configuration Security
log "Checking SSH configuration..."
REPORT+="SSH SECURITY\n"
REPORT+="============\n\n"

SSH_ROOT_LOGIN=$(grep "^PermitRootLogin" /etc/ssh/sshd_config || echo "PermitRootLogin not set")
SSH_PASSWORD_AUTH=$(grep "^PasswordAuthentication" /etc/ssh/sshd_config || echo "PasswordAuthentication not set")
SSH_EMPTY_PASSWORDS=$(grep "^PermitEmptyPasswords" /etc/ssh/sshd_config || echo "PermitEmptyPasswords not set")

if echo "$SSH_ROOT_LOGIN" | grep -q "no"; then
    REPORT+="✅ Root login: Disabled\n"
else
    REPORT+="⚠️  Root login: $SSH_ROOT_LOGIN\n"
fi

if echo "$SSH_PASSWORD_AUTH" | grep -q "no"; then
    REPORT+="✅ Password authentication: Disabled\n"
else
    REPORT+="⚠️  Password authentication: $SSH_PASSWORD_AUTH\n"
fi

REPORT+="\n"

# 5. Firewall Status
log "Checking firewall..."
REPORT+="FIREWALL STATUS\n"
REPORT+="===============\n\n"

if command -v ufw &> /dev/null; then
    UFW_STATUS=$(ufw status | grep "Status:" | awk '{print $2}')
    if [ "$UFW_STATUS" = "active" ]; then
        REPORT+="✅ UFW: Active\n"
        REPORT+="$(ufw status numbered)\n\n"
    else
        REPORT+="⚠️  UFW: Inactive\n\n"
    fi
else
    REPORT+="⚠️  UFW not installed\n\n"
fi

# 6. Fail2ban Status
log "Checking fail2ban..."
REPORT+="FAIL2BAN STATUS\n"
REPORT+="===============\n\n"

if systemctl is-active fail2ban >/dev/null 2>&1; then
    REPORT+="✅ Fail2ban: Active\n"

    # Get ban statistics
    BANNED_IPS=$(fail2ban-client status sshd 2>/dev/null | grep "Currently banned" | awk '{print $NF}')
    TOTAL_BANS=$(fail2ban-client status sshd 2>/dev/null | grep "Total banned" | awk '{print $NF}')

    REPORT+="  Currently banned IPs: $BANNED_IPS\n"
    REPORT+="  Total bans: $TOTAL_BANS\n\n"
else
    REPORT+="⚠️  Fail2ban: Inactive\n\n"
fi

# 7. Open Ports
log "Checking open ports..."
REPORT+="OPEN PORTS\n"
REPORT+="==========\n\n"

if command -v ss &> /dev/null; then
    REPORT+="Listening services:\n"
    REPORT+="$(ss -tulpn | grep LISTEN | awk '{print $5, $7}' | sort -u)\n\n"
fi

# 8. Recently Modified System Files
log "Checking recently modified system files..."
REPORT+="RECENTLY MODIFIED SYSTEM FILES (Last 7 days)\n"
REPORT+="============================================\n\n"

MODIFIED_FILES=$(find /etc -type f -mtime -7 -ls 2>/dev/null | wc -l)
if [ "$MODIFIED_FILES" -gt 0 ]; then
    REPORT+="Found $MODIFIED_FILES modified files in /etc (last 7 days)\n"
    REPORT+="$(find /etc -type f -mtime -7 -ls 2>/dev/null | tail -20)\n\n"
else
    REPORT+="No recent modifications in /etc\n\n"
fi

# 9. Suspicious Login Attempts
log "Checking for suspicious login attempts..."
REPORT+="SUSPICIOUS LOGIN ATTEMPTS (Last 7 days)\n"
REPORT+="========================================\n\n"

FAILED_LOGINS=$(grep "Failed password" /var/log/auth.log 2>/dev/null | wc -l)
REPORT+="Total failed login attempts: $FAILED_LOGINS\n\n"

if [ "$FAILED_LOGINS" -gt 100 ]; then
    REPORT+="Top attacking IPs:\n"
    REPORT+="$(grep "Failed password" /var/log/auth.log 2>/dev/null | awk '{print $(NF-3)}' | sort | uniq -c | sort -rn | head -10)\n\n"
fi

# 10. Docker Security (if applicable)
if command -v docker &> /dev/null; then
    log "Checking Docker security..."
    REPORT+="DOCKER SECURITY\n"
    REPORT+="===============\n\n"

    # Check for running containers
    RUNNING_CONTAINERS=$(docker ps --format "{{.Names}}" 2>/dev/null | wc -l)
    REPORT+="Running containers: $RUNNING_CONTAINERS\n"

    if [ "$RUNNING_CONTAINERS" -gt 0 ]; then
        REPORT+="$(docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}')\n\n"

        # Check for outdated images
        REPORT+="Checking for image updates...\n"
        docker images --format "{{.Repository}}:{{.Tag}}" | while read image; do
            if [ "$image" != "<none>:<none>" ]; then
                docker pull "$image" > /dev/null 2>&1 && REPORT+="  Updated: $image\n" || REPORT+="  Current: $image\n"
            fi
        done
        REPORT+="\n"
    fi
fi

# Generate summary
log "Generating vulnerability summary..."
SUMMARY="Vulnerability Scan Summary - $(date +%Y-%m-%d)\n"
SUMMARY+="==========================================\n\n"

ISSUES=0
if [ "$SECURITY_UPDATES" -gt 0 ]; then
    SUMMARY+="⚠️  $SECURITY_UPDATES security updates available\n"
    ISSUES=$((ISSUES + SECURITY_UPDATES))
fi

if [ "${CRITICAL:-0}" -gt 0 ] || [ "${HIGH:-0}" -gt 0 ]; then
    SUMMARY+="⚠️  npm vulnerabilities: $CRITICAL critical, $HIGH high\n"
    ISSUES=$((ISSUES + CRITICAL + HIGH))
fi

if [ "$EXPIRY_DAYS" -lt 14 ]; then
    SUMMARY+="⚠️  SSL certificate expires in $EXPIRY_DAYS days\n"
    ISSUES=$((ISSUES + 1))
fi

SUMMARY+="\nTotal issues requiring attention: $ISSUES\n\n"
SUMMARY+="========================================\n\n"

# Add summary to beginning of report
FULL_REPORT="$SUMMARY$REPORT"

# Save and send report
generate_report "$FULL_REPORT"

if [ "$ISSUES" -gt 0 ]; then
    log "⚠️  Found $ISSUES vulnerability issues"
    send_report "Vulnerability Scan - $ISSUES Issues Found" "$REPORT_FILE"
else
    log "✅ No critical vulnerabilities found"
    send_report "Vulnerability Scan - All Clear" "$REPORT_FILE"
fi

log "=========================================="
log "Vulnerability scan completed"
log "=========================================="

# Cleanup old reports (keep last 30 days)
find /tmp -name "vulnerability-report-*.txt" -mtime +30 -delete
